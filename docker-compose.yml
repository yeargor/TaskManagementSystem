services:
  my-postgres:
    image: postgres:16
    container_name: my-postgres
    restart: always
    environment:
      POSTGRES_DB: springAuth
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: pleasecomein
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-files:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin4_container
    restart: always
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: egorapotcha@gmail.com
      PGADMIN_DEFAULT_PASSWORD: pleasecomein
    volumes:
      - pgadmin-data:/var/lib/pgadmin

  my-keycloak:
    image: keycloak/keycloak:22.0.5
    container_name: my-keycloak
    restart: always
    environment:
      spi-event-listener-custom-event-listener-webhookUrl: http://spring-app:8081/keycloak-events/user-updated
      spi-event-listener-custom-event-listener-secretKey: p8HkF6k5wHzL3qYRCdjjaQEyRCNPKTwO
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD : admin
      KEYCLOAK_FRONTEND_URL: http://my-keycloak:8080
    ports:
      - "8080:8080"
    volumes:
      - ./init-files/keycloak-custom-providers-0.2.0-SNAPSHOT-jar-with-dependencies.jar:/opt/keycloak/providers/keycloak-custom2.jar
      - ./init-files/realm-export.json:/opt/keycloak/data/import/realm-export.json
    command:
      - "start-dev"
      - "--import-realm"
    depends_on:
      my-postgres:
        condition: service_healthy
    extra_hosts:
      - "my-keycloak:127.0.0.1"
    healthcheck:
      interval: 15s
      timeout: 15s
      retries: 15
      test:
        [
          "CMD-SHELL",
          'exec 3<>/dev/tcp/localhost/8080; echo -e "GET /health/ready HTTP/1.1\nhost: localhost:8080\n" >&3; timeout --preserve-status 1 cat <&3 | grep -m 1 status | grep -m 1 UP; ERROR=$?; exec 3<&-; exec 3>&-; exit $ERROR'
        ]
#юзеру нужно дать роль просмотра юзеров+ не забывай чекать client-secret
  #проверить апи спринг сервиса+чекнуь апи кейклока и понять, как это показать и как
    #это должно работать
      #чекнуть, как экспортировать юзеров в рилм


      #проблема была в том, что я не разрешил обращаться на точку входа spi в спринге
  spring-app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-app
    restart: on-failure
    ports:
      - "8081:8081"
    depends_on:
      my-postgres:
        condition: service_healthy
      my-keycloak:
        condition: service_healthy

volumes:
  postgres-data:
  pgadmin-data:
